
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.FileReader;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\005\003" +
    "\000\002\006\006\000\002\007\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\004\004\005\001\002\000\004\002\041\001" +
    "\002\000\004\006\010\001\002\000\006\005\ufffe\006\ufffe" +
    "\001\002\000\006\005\040\006\010\001\002\000\004\014" +
    "\014\001\002\000\004\013\013\001\002\000\004\013\ufffc" +
    "\001\002\000\006\005\ufffd\006\ufffd\001\002\000\010\010" +
    "\021\014\020\016\017\001\002\000\014\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\015\ufff5\001\002\000\014\007\ufff8\010" +
    "\ufff8\011\027\012\030\015\ufff8\001\002\000\014\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\015\ufff4\001\002\000\010\010" +
    "\021\014\020\016\017\001\002\000\010\010\021\014\020" +
    "\016\017\001\002\000\010\007\023\010\024\015\025\001" +
    "\002\000\010\010\021\014\020\016\017\001\002\000\010" +
    "\010\021\014\020\016\017\001\002\000\004\013\ufffb\001" +
    "\002\000\014\007\ufff9\010\ufff9\011\027\012\030\015\ufff9" +
    "\001\002\000\010\010\021\014\020\016\017\001\002\000" +
    "\010\010\021\014\020\016\017\001\002\000\014\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\015\ufff6\001\002\000\014\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7\001\002\000\014" +
    "\007\ufffa\010\ufffa\011\027\012\030\015\ufffa\001\002\000" +
    "\014\007\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\001\002" +
    "\000\010\007\023\010\024\015\036\001\002\000\014\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3\001\002\000\006" +
    "\005\uffff\006\uffff\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\006\004\005\005\010\006\011\001\001\000\002" +
    "\001\001\000\010\004\036\005\010\006\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\021\010\015\011\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\034\010\015\011\014\001\001\000\004\011\033\001" +
    "\001\000\002\001\001\000\006\010\032\011\014\001\001" +
    "\000\006\010\025\011\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\031\001\001\000\004\011\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main(String args[]) throws Exception {
		      new parser(new Yylex(new FileReader(args[0]))).parse();
    } // End Main


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= BEGIN instructions END 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: program <== BEGIN instructions END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instructions <== instructions instruction");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instructions <== instruction");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= sentence EOS 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instruction <== sentence EOS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= printSentence 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: sentence <== printSentence ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // printSentence ::= PRINT LP arithExpr RP 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: printSentence <== PRINT LP arithExpr RP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printSentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arithExpr ::= arithExpr PLUS term 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: arithExpr <== arithExpr PLUS term"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arithExpr ::= arithExpr MINUS term 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: arithExpr <== arithExpr MINUS term"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arithExpr ::= term 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: arithExpr <== term"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= term MULT factor 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: term <== term MULT factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= term DIV factor 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: term <== term DIV factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= factor 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: term <== factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // factor ::= NUMBER 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: factor <== NUMBER "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // factor ::= LP arithExpr RP 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: factor <== LP arithExpr RP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // factor ::= MINUS factor 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: factor <== MINUS factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
