
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.FileReader;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\005\003" +
    "\000\002\006\006\000\002\006\006\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\012\005" +
    "\000\002\012\003\000\002\011\003\000\002\011\005\000" +
    "\002\011\004\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\004\005\001\002\000\004\002\057\001" +
    "\002\000\004\006\010\001\002\000\006\005\ufffe\006\ufffe" +
    "\001\002\000\006\005\056\006\010\001\002\000\004\015" +
    "\014\001\002\000\004\014\013\001\002\000\004\014\ufffc" +
    "\001\002\000\006\005\ufffd\006\ufffd\001\002\000\014\007" +
    "\025\010\015\015\020\022\021\024\023\001\002\000\012" +
    "\007\025\010\015\015\020\022\021\001\002\000\020\007" +
    "\ufff3\010\ufff3\013\042\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\001\002\000\016\007\036\010\037\016\050\017\045\020" +
    "\047\021\046\001\002\000\012\007\025\010\015\015\020" +
    "\022\021\001\002\000\024\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\016\uffed\017\uffed\020\uffed\021\uffed\001\002" +
    "\000\024\007\uffee\010\uffee\011\031\012\032\013\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\001\002\000\004\016\ufff6" +
    "\001\002\000\004\016\030\001\002\000\012\007\025\010" +
    "\015\015\020\022\021\001\002\000\024\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\001\002\000\024\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\001\002\000" +
    "\004\014\ufffa\001\002\000\012\007\025\010\015\015\020" +
    "\022\021\001\002\000\012\007\025\010\015\015\020\022" +
    "\021\001\002\000\024\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\001\002\000" +
    "\024\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\001\002\000\010\007\036\010" +
    "\037\016\040\001\002\000\012\007\025\010\015\015\020" +
    "\022\021\001\002\000\012\007\025\010\015\015\020\022" +
    "\021\001\002\000\024\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\016\uffec\017\uffec\020\uffec\021\uffec\001\002\000" +
    "\020\007\ufff4\010\ufff4\013\042\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\001\002\000\012\007\025\010\015\015\020\022" +
    "\021\001\002\000\024\007\uffef\010\uffef\011\031\012\032" +
    "\013\uffef\016\uffef\017\uffef\020\uffef\021\uffef\001\002\000" +
    "\020\007\ufff5\010\ufff5\013\042\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\001\002\000\012\007\025\010\015\015\020\022" +
    "\021\001\002\000\012\007\025\010\015\015\020\022\021" +
    "\001\002\000\012\007\025\010\015\015\020\022\021\001" +
    "\002\000\004\014\ufffb\001\002\000\010\007\036\010\037" +
    "\016\ufff8\001\002\000\010\007\036\010\037\016\ufff7\001" +
    "\002\000\010\007\036\010\037\016\ufff9\001\002\000\024" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\001\002\000\006\005\uffff\006\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\006\004\005\005\010\006\011\001\001\000\002" +
    "\001\001\000\010\004\054\005\010\006\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\016\010\021\011\025\012\015\013" +
    "\023\001\001\000\004\011\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\034\010\021\011\025\012" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\033\001\001\000\004\011\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\021" +
    "\011\025\012\043\001\001\000\010\010\021\011\025\012" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\042\011\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\052\010\021\011\025\012\015\001\001" +
    "\000\012\007\051\010\021\011\025\012\015\001\001\000" +
    "\012\007\050\010\021\011\025\012\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main(String args[]) throws Exception {
		      new parser(new Yylex(new FileReader(args[0]))).parse();
    } // End Main


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= BEGIN instructions END 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: program <== BEGIN instructions END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instructions <== instructions instruction");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instructions <== instruction");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= sentence EOS 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instruction <== sentence EOS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= printSentence 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: sentence <== printSentence ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // printSentence ::= PRINT LP arithExpr RP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						System.out.println("    PARSER:: printSentence <== PRINT LP arithExpr<"+a+"> RP"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printSentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // printSentence ::= PRINT LP boolExpr RP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						System.out.println("    PARSER:: printSentence <== PRINT LP boolExpr<"+a+"> RP");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printSentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // boolExpr ::= arithExpr LT arithExpr 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = a.compareTo(b)<0;
						System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== arithExpr<"+a+"> LT arithExpr<"+b+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // boolExpr ::= arithExpr GT arithExpr 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = a.compareTo(b)>0;
						System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== arithExpr<"+a+"> GT arithExpr<"+b+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // boolExpr ::= arithExpr EQ arithExpr 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = a.compareTo(b)==0;
						System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== arithExpr<"+a+"> EQ arithExpr<"+b+">");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // boolExpr ::= BOOLEAN 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = a;
						System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== BOOLEAN<"+a+">");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arithExpr ::= arithExpr PLUS averageExpr 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = a+b;
						System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> PLUS averageExpr<"+b+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arithExpr ::= arithExpr MINUS averageExpr 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = a-b;
						System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> MINUS averageExpr<"+b+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arithExpr ::= averageExpr 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = a;
						System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== averageExpr<"+a+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= term MULT factor 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = t*f;
						System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> MULT factor<"+f+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= term DIV factor 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = t/f;
						System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> DIV factor<"+f+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = f;
						System.out.println("    PARSER:: term<"+RESULT+"> <== factor<"+f+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // averageExpr ::= averageExpr AVG term 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = (a+t)/2;
						System.out.println("    PARSER:: averageExpr<"+RESULT+"> <== averageExpr<"+a+"> AVG term<"+t+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("averageExpr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // averageExpr ::= term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = t;
						System.out.println("    PARSER:: averageExpr<"+RESULT+"> <== term<"+t+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("averageExpr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= NUMBER 
            {
              Double RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = v;
						System.out.println("    PARSER:: factor<"+RESULT+"> <== NUMBER<"+v+">"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= LP arithExpr RP 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						RESULT = a;
						System.out.println("    PARSER:: factor<"+RESULT+"> <== LP arithExpr<"+a+"> RP "); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= PLUS factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = f;
						System.out.println("    PARSER:: factor<"+RESULT+"> <== PLUS factor<"+f+"> "); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= MINUS factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = -f;
						System.out.println("    PARSER:: factor<"+RESULT+"> <== MINUS factor<"+f+"> "); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
